---
import Layout from '../layouts/Layout.astro';

const returnUrl = Astro.url.searchParams.get('returnUrl') || '/products/product';
const images = [
  { id: 1, url: 'https://via.placeholder.com/150', name: 'Image 1' },
  { id: 2, url: 'https://via.placeholder.com/150', name: 'Image 2' },
  { id: 3, url: 'https://via.placeholder.com/150', name: 'Image 3' },
  // Add more images as needed
];
---

<Layout title="Upload Media">
  <main>
    <div class="header">
      <h1>Upload Media</h1>
    </div>
    <div class="search-container">
      <div class="search-bar">
        <span class="material-icons">search</span>
        <input type="text" id="mediaSearchInput" placeholder="Search media" class="search-input">
      </div>
    </div>
    <div class="upload-options">
      <button id="uploadFromDevice" class="upload-button">
        <span class="material-icons">file_upload</span>
        Upload from device
      </button>
      <button id="uploadFromUrl" class="upload-button">
        <span class="material-icons">link</span>
        Upload from URL
      </button>
    </div>
    <div class="media-grid">
      {images.map((image) => (
        <div class="media-item" data-id={image.id}>
          <img src={image.url} alt={image.name} />
          <span class="media-name">{image.name}</span>
          <input type="checkbox" class="media-select" data-id={image.id} />
        </div>
      ))}
      <input type="file" id="fileInput" style="display: none;" accept="image/*,video/*" multiple>
    </div>
    <button id="selectMediaButton" class="select-button">Select Media</button>
  </main>
</Layout>

<style>
  main {
    max-width: 800px;
    margin: 0 auto;
    padding: 1rem;
  }

  .header {
    display: flex;
    align-items: center;
    margin-bottom: 1rem;
  }

  h1 {
    font-size: 1.5rem;
    font-weight: bold;
  }

  .search-container {
    margin-bottom: 1rem;
  }

  .search-bar {
    display: flex;
    align-items: center;
    background-color: #f5f5f5;
    border-radius: 8px;
    padding: 0.5rem 1rem;
  }

  .search-input {
    border: none;
    background: transparent;
    font-size: 1rem;
    width: 100%;
    margin-left: 0.5rem;
    outline: none;
  }

  .upload-options {
    display: flex;
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .upload-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background-color: #f0f0f0;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  .upload-button:hover {
    background-color: #e0e0e0;
  }

  .media-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    gap: 1rem;
  }

  .media-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    cursor: pointer;
  }

  .media-item img {
    width: 100%;
    height: 150px;
    object-fit: cover;
    border-radius: 8px;
  }

  .media-name {
    margin-top: 0.5rem;
    font-size: 0.9rem;
    text-align: center;
  }

  .media-select {
    position: absolute;
    top: 5px;
    right: 5px;
  }

  .select-button {
    display: block;
    margin: 1rem auto;
    padding: 0.5rem 1rem;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
</style>

<script define:vars={{ returnUrl }}>
  document.addEventListener('DOMContentLoaded', () => {
    const mediaSearchInput = document.getElementById('mediaSearchInput');
    const mediaGrid = document.querySelector('.media-grid');
    const uploadFromDevice = document.getElementById('uploadFromDevice');
    const uploadFromUrl = document.getElementById('uploadFromUrl');
    const fileInput = document.getElementById('fileInput');
    const selectMediaButton = document.getElementById('selectMediaButton');

    function filterMedia(searchTerm) {
      const items = mediaGrid.querySelectorAll('.media-item');
      items.forEach((item) => {
        const mediaName = item.querySelector('.media-name').textContent.toLowerCase();
        item.style.display = mediaName.includes(searchTerm.toLowerCase()) ? 'flex' : 'none';
      });
    }

    mediaSearchInput.addEventListener('input', (e) => {
      filterMedia(e.target.value.trim());
    });

    uploadFromDevice.addEventListener('click', () => {
      fileInput.click();
    });

    fileInput.addEventListener('change', (e) => {
      const files = e.target.files;
      if (files.length > 0) {
        Array.from(files).forEach(file => {
          const reader = new FileReader();
          reader.onload = (e) => {
            const newItem = document.createElement('div');
            newItem.className = 'media-item';
            newItem.dataset.id = Date.now(); // Use a timestamp as a simple unique ID
            newItem.innerHTML = `
              <img src="${e.target.result}" alt="${file.name}" />
              <span class="media-name">${file.name}</span>
              <input type="checkbox" class="media-select" data-id="${Date.now()}" />
            `;
            mediaGrid.appendChild(newItem);
          };
          reader.readAsDataURL(file);
        });
      }
    });

    uploadFromUrl.addEventListener('click', () => {
      // Implement URL upload functionality
      const url = prompt('Enter image URL:');
      if (url) {
        console.log('Uploading from URL:', url);
        // Implement the actual upload logic here
      }
    });

    mediaGrid.addEventListener('click', (e) => {
      const mediaItem = e.target.closest('.media-item');
      if (mediaItem) {
        const mediaId = mediaItem.dataset.id;
        const updatedReturnUrl = new URL(returnUrl, window.location.origin);
        updatedReturnUrl.searchParams.set('selectedMedia', mediaId);
        window.location.href = updatedReturnUrl.toString();
      }
    });

    selectMediaButton.addEventListener('click', () => {
      const selectedCheckboxes = document.querySelectorAll('.media-select:checked');
      const selectedIds = Array.from(selectedCheckboxes).map(checkbox => checkbox.dataset.id);
      
      if (selectedIds.length > 0) {
        const updatedReturnUrl = new URL(returnUrl, window.location.origin);
        selectedIds.forEach(id => {
          updatedReturnUrl.searchParams.append('selectedMedia', id);
        });
        window.location.href = updatedReturnUrl.toString();
      } else {
        alert('Please select at least one media item.');
      }
    });
  });
</script>
